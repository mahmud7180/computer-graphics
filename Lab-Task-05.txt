#include <windows.h>  // for MS Windows
#include<cstdio>
#include<GL/gl.h>
#include <GL/glut.h>  // GLUT, include glu.h and gl.h
#include <math.h>>

# define PI          3.14159265358979323846


/* Handler for window-repaint event. Call back when the window first appears and
whenever the window needs to be re-painted. */
void display()
{
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Set background color to black and opaque
    glClear(GL_COLOR_BUFFER_BIT);         // Clear the color buffer (background)
    glLineWidth(10);

    glBegin(GL_LINES); //back line
    glColor3ub(255,255,255);
    glVertex2f(0.0f,8.0f);
    glVertex2f(0.0f,14.0f);
    glEnd();


    glBegin(GL_LINES); //  bottom line
    glColor3ub(255,255,255);
    glVertex2f(0.0f,8.0f);
    glVertex2f(12.0f,8.0f);
    glEnd();
    glBegin(GL_LINES); // bottom line 02
    glColor3ub(255,255,255);
    glVertex2f(19.8f,8.0f);
    glVertex2f(37.0f,8.0f);
    glEnd();
    glBegin(GL_LINES); // bottom line 03
    glColor3ub(255,255,255);
    glVertex2f(43.0f,8.0f);
    glVertex2f(56.0f,8.0f);
    glEnd();

    glBegin(GL_LINES); //Middle  line
    glColor3ub(255,255,255);
    glVertex2f(0.0f,14.0f);
    glVertex2f(56.0f,14.0f);
    glEnd();

    glBegin(GL_LINES); //Upside  1st line
    glColor3ub(255,255,255);
    glVertex2f(16.0f,24.0f);
    glVertex2f(40.0f,24.0f);
    glEnd();


    glBegin(GL_LINES); //Upside  line
    glColor3ub(255,255,255);
    glVertex2f(8.0f,14.0f);
    glVertex2f(16.0f,24.0f);
    glEnd();

    glBegin(GL_LINES); //Upside  line
    glColor3ub(255,255,255);
    glVertex2f(21.0f,14.0f);
    glVertex2f(21.0f,24.0f);
    glEnd();
    glBegin(GL_LINES); //Upside  line
    glColor3ub(255,255,255);
    glVertex2f(35.0f,14.0f);
    glVertex2f(35.0f,24.0f);
    glEnd();
    glBegin(GL_LINES); //Upside  line
    glColor3ub(255,255,255);
    glVertex2f(48.0f,14.0f);
    glVertex2f(40.0f,24.0f);
    glEnd();
    glBegin(GL_LINES); //Font line
    glColor3ub(255,255,255);
    glVertex2f(56.0f,8.0f);
    glVertex2f(56.0f,14.0f);
    glEnd();

    	    glLineWidth(15);
	    glBegin(GL_LINES); //road
    glColor3ub(255,255,255);
    glVertex2f(-5.0f,4.0f);
    glVertex2f(60.0f,4.0f);
    glEnd();


               /*Circle01 */


    int i;// float PI;

	GLfloat x=16.0f; GLfloat y=8.0f; GLfloat radius =4.0f;
	int triangleAmount = 200; //# of triangles used to draw circle


	GLfloat twicePi = 2.0f * PI ;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255,255,255);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
	glEnd();


	                 /*Circle 02 */

                    x=40.0f; y=8.0f; radius =4.0f;
	 triangleAmount = 200; //# of triangles used to draw circle

 twicePi = 2.0f * PI ;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255,255,255);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
	glEnd();




    glLineWidth(15);
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(12.0f,8.0f);
    glVertex2f(20.0f,8.0f);
    glEnd();

    glLineWidth(15);
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(16.0f,4.0f);
    glVertex2f(16.0f,12.0f);
    glEnd();

    glLineWidth(15);   //2nd wheel
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(36.0f,8.0f);
    glVertex2f(44.0f,8.0f);
    glEnd();

    glLineWidth(15);  //2nd wheel
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(40.0f,4.0f);
    glVertex2f(40.0f,12.0f);
    glEnd();








    glFlush();  // Render now
}

/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv)
{
    glutInit(&argc, argv);                 // Initialize GLUT
    glutCreateWindow("OpenGL Setup"); // Create a window with the given title
    glutInitWindowSize(320, 320);   // Set the window's initial width & height
    gluOrtho2D(-5,60,0,30); // Set the window's initial width & height
    glutDisplayFunc(display); // Register display callback handler for window re-paint
    glutMainLoop();           // Enter the event-processing loop
    return 0;
}

